"use strict";(self.webpackChunkseata_website=self.webpackChunkseata_website||[]).push([[92124],{47066:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var r=t(74848),s=t(28453);const a={title:"Quick Start",keywords:["Seata"],description:"Let's begin with a Microservices example."},i="Quick Start",o={id:"user/quickstart",title:"Quick Start",description:"Let's begin with a Microservices example.",source:"@site/i18n/en/docusaurus-plugin-content-docs/version-v2.1/user/quickstart.md",sourceDirName:"user",slug:"/user/quickstart",permalink:"/docs/v2.1/user/quickstart",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/incubator-seata-website/blob/docusaurus/i18n/en/docusaurus-plugin-content-docs/version-v2.1/user/quickstart.md",tags:[],version:"v2.1",frontMatter:{title:"Quick Start",keywords:["Seata"],description:"Let's begin with a Microservices example."},sidebar:"docs",previous:{title:"FAQ",permalink:"/docs/v2.1/overview/faq"},next:{title:"Seata Parameter Configuration",permalink:"/docs/v2.1/user/configurations"}},c={},d=[{value:"Use case",id:"use-case",level:2},{value:"Architecture",id:"architecture",level:3},{value:"StorageService",id:"storageservice",level:3},{value:"OrderService",id:"orderservice",level:3},{value:"AccountService",id:"accountservice",level:3},{value:"Main business logic",id:"main-business-logic",level:3},{value:"Distributed Transaction Solution with SEATA",id:"distributed-transaction-solution-with-seata",level:2},{value:"Example powered by Dubbo + SEATA",id:"example-powered-by-dubbo--seata",level:2},{value:"Step 1: Setup database",id:"step-1-setup-database",level:3},{value:"Step 2: Create UNDO_LOG table",id:"step-2-create-undo_log-table",level:3},{value:"Step 3: Create tables for example business",id:"step-3-create-tables-for-example-business",level:3},{value:"Step 4: Start Server",id:"step-4-start-server",level:3},{value:"Step 5: Run example",id:"step-5-run-example",level:3},{value:"RocketMQ Integration to Seata",id:"rocketmq-integration-to-seata",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"quick-start",children:"Quick Start"}),"\n",(0,r.jsx)(n.p,{children:"Let's begin with a Microservices example."}),"\n",(0,r.jsx)(n.h2,{id:"use-case",children:"Use case"}),"\n",(0,r.jsx)(n.p,{children:"A business logic for user purchasing commodities. The whole business logic is powered by 3 microservices:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Storage service: deduct storage count on given commodity."}),"\n",(0,r.jsx)(n.li,{children:"Order service: create order according to purchase request."}),"\n",(0,r.jsx)(n.li,{children:"Account service: debit the balance of user's account."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"architecture",children:"Architecture"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Architecture",src:t(19972).A+"",width:"1732",height:"940"})}),"\n",(0,r.jsx)(n.h3,{id:"storageservice",children:"StorageService"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public interface StorageService {\n\n    /**\n     * deduct storage count\n     */\n    void deduct(String commodityCode, int count);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"orderservice",children:"OrderService"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public interface OrderService {\n\n    /**\n     * create order\n     */\n    Order create(String userId, String commodityCode, int orderCount);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"accountservice",children:"AccountService"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public interface AccountService {\n\n    /**\n     * debit balance of user's account\n     */\n    void debit(String userId, int money);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"main-business-logic",children:"Main business logic"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class BusinessServiceImpl implements BusinessService {\n\n    private StorageService storageService;\n\n    private OrderService orderService;\n\n    /**\n     * purchase\n     */\n    public void purchase(String userId, String commodityCode, int orderCount) {\n\n        storageService.deduct(commodityCode, orderCount);\n\n        orderService.create(userId, commodityCode, orderCount);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"public class OrderServiceImpl implements OrderService {\n\n    private OrderDAO orderDAO;\n\n    private AccountService accountService;\n\n    public Order create(String userId, String commodityCode, int orderCount) {\n\n        int orderMoney = calculate(commodityCode, orderCount);\n\n        accountService.debit(userId, orderMoney);\n\n        Order order = new Order();\n        order.userId = userId;\n        order.commodityCode = commodityCode;\n        order.count = orderCount;\n        order.money = orderMoney;\n\n        // INSERT INTO orders ...\n        return orderDAO.insert(order);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"distributed-transaction-solution-with-seata",children:"Distributed Transaction Solution with SEATA"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:t(28840).A+"",width:"868",height:"473"})}),"\n",(0,r.jsxs)(n.p,{children:["We just need an annotation ",(0,r.jsx)(n.code,{children:"@GlobalTransactional"})," on business method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"\n    @GlobalTransactional\n    public void purchase(String userId, String commodityCode, int orderCount) {\n        ......\n    }\n"})}),"\n",(0,r.jsx)(n.h2,{id:"example-powered-by-dubbo--seata",children:"Example powered by Dubbo + SEATA"}),"\n",(0,r.jsx)(n.h3,{id:"step-1-setup-database",children:"Step 1: Setup database"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Requirement: MySQL with InnoDB engine."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," In fact, there should be 3 database for the 3 services in the example use case. However, we can just create one database and configure 3 data sources for simple."]}),"\n",(0,r.jsx)(n.p,{children:"Modify Spring XML with the database URL/username/password you just created."}),"\n",(0,r.jsx)(n.p,{children:"dubbo-account-service.xml\ndubbo-order-service.xml\ndubbo-storage-service.xml"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'        <property name="url" value="jdbc:mysql://x.x.x.x:3306/xxx" />\n        <property name="username" value="xxx" />\n        <property name="password" value="xxx" />\n'})}),"\n",(0,r.jsx)(n.h3,{id:"step-2-create-undo_log-table",children:"Step 2: Create UNDO_LOG table"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"UNDO_LOG"})," table is required by SEATA AT mode. You can obtain the specified version of the undo log SQL script from ",(0,r.jsx)(n.a,{href:"https://github.com/apache/incubator-seata/tree/2.x/script/client/at/db",children:"github"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE IF NOT EXISTS `undo_log`\n(\n    `branch_id`     BIGINT       NOT NULL COMMENT 'branch transaction id',\n    `xid`           VARCHAR(128) NOT NULL COMMENT 'global transaction id',\n    `context`       VARCHAR(128) NOT NULL COMMENT 'undo_log context,such as serialization',\n    `rollback_info` LONGBLOB     NOT NULL COMMENT 'rollback info',\n    `log_status`    INT(11)      NOT NULL COMMENT '0:normal status,1:defense status',\n    `log_created`   DATETIME(6)  NOT NULL COMMENT 'create datetime',\n    `log_modified`  DATETIME(6)  NOT NULL COMMENT 'modify datetime',\n    UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`)\n    ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8mb4 COMMENT ='AT transaction mode undo table';\n\nALTER TABLE `undo_log` ADD INDEX `ix_log_created` (`log_created`);\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"step-3-create-tables-for-example-business",children:"Step 3: Create tables for example business"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"\nDROP TABLE IF EXISTS `storage_tbl`;\nCREATE TABLE `storage_tbl` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `commodity_code` varchar(255) DEFAULT NULL,\n  `count` int(11) DEFAULT 0,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY (`commodity_code`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n\nDROP TABLE IF EXISTS `order_tbl`;\nCREATE TABLE `order_tbl` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `user_id` varchar(255) DEFAULT NULL,\n  `commodity_code` varchar(255) DEFAULT NULL,\n  `count` int(11) DEFAULT 0,\n  `money` int(11) DEFAULT 0,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n\nDROP TABLE IF EXISTS `account_tbl`;\nCREATE TABLE `account_tbl` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `user_id` varchar(255) DEFAULT NULL,\n  `money` int(11) DEFAULT 0,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"step-4-start-server",children:"Step 4: Start Server"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Download server package from ",(0,r.jsx)(n.a,{href:"https://github.com/apache/incubator-seata/releases",children:"https://github.com/apache/incubator-seata/releases"}),", unzip it."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-shell",children:"Usage: sh seata-server.sh(for linux and mac) or cmd seata-server.bat(for windows) [options]\n  Options:\n    --host, -h\n      The address is expose to registration center and other service can access seata-server via this ip.\n      Default: 0.0.0.0\n    --port, -p\n      The port to listen.\n      Default: 8091\n    --storeMode, -m\n      log store mode : file\u3001db\n      Default: file\n    --help\n\ne.g.\n\nsh seata-server.sh -p 8091 -h 127.0.0.1 -m file\n"})}),"\n",(0,r.jsx)(n.h3,{id:"step-5-run-example",children:"Step 5: Run example"}),"\n",(0,r.jsxs)(n.p,{children:["Go to samples repo: ",(0,r.jsx)(n.a,{href:"https://github.com/apache/incubator-seata-samples/tree/master/at-sample",children:"seata-samples/at-samples"}),", and find a suitable dependency setup. Start ",(0,r.jsx)(n.code,{children:"Account"}),", ",(0,r.jsx)(n.code,{children:"Storage"}),", ",(0,r.jsx)(n.code,{children:"Order"}),", ",(0,r.jsx)(n.code,{children:"Business"})," services accordingly."]}),"\n",(0,r.jsx)(n.h2,{id:"rocketmq-integration-to-seata",children:"RocketMQ Integration to Seata"}),"\n",(0,r.jsx)(n.p,{children:"Using RocketMQ as a participant in seata global transaction is simple,\nFirst, make sure you have introduced seata-all or springboot-starter of seata dependency."}),"\n",(0,r.jsxs)(n.p,{children:["Create the producer by ",(0,r.jsx)(n.code,{children:"SeataMQProducerFactory"}),", then send messages by  ",(0,r.jsx)(n.code,{children:"SeataMQProducer"}),". Here is an example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class BusinessServiceImpl implements BusinessService {\n    private static final String NAME_SERVER = "127.0.0.1:9876";\n    private static final String PRODUCER_GROUP = "test-group";\n    private static final String TOPIC = "test-topic";\n    private static SeataMQProducer producer= SeataMQProducerFactory.createSingle(NAME_SERVER, PRODUCER_GROUP);\n\n    public void purchase(String userId, String commodityCode, int orderCount) {\n      producer.send(new Message(TOPIC, "testMessage".getBytes(StandardCharsets.UTF_8)));\n      //do something\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"The effect of this approach is that the production message acts as a participant RM in the seata global transaction. When the 1st phase of the global transaction is completed, the MQ message will be committed or rollback based on the transaction 2nd phase\u2019s request,\nthe message will not be consumed until then.\nNote: If there is no xid in the current thread, the producer will degrade to a normal send instead of sending a half-message."})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},19972:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/architecture-6bdb120b83710010167e8b75448505ec.png"},28840:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/solution-1bdadb80e54074aa3088372c17f0244b.png"},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var r=t(96540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);